{"version":3,"sources":["views/Homepage/styledComponents/Container.js","views/Homepage/styledComponents/TodoListContainer.js","components/todoItem/styledComponent/TodoItemContainer.js","components/todoItem/styledComponent/Button.js","components/todoItem/TodoItem.js","components/todoInput/styledComponents/TodoInputContainer.js","components/todoInput/TodoInput.js","components/modal/styledComponents/ModalContainer.js","components/modal/Model.js","config/config.js","services/Api.js","services/TodoServices.js","views/Homepage/index.js","App.js","serviceWorker.js","index.js"],"names":["styled","div","ol","li","button","props","colour","TodoItem","number","id","description","deleteHandler","changeHandler","TodoItemContainer","Button","onClick","TodoInput","inputHandler","useState","value","setValue","TodoInputContainer","onSubmit","e","preventDefault","target","reset","type","placeholder","onChange","Model","targetID","todoList","hideModalHandler","submitHandler","textValue","setTextValue","setPlaceholder","useEffect","filter","item","todo_id","findTargetText","baseURL","process","axois","create","config","Api","get","delete","aDescription","data","post","newData","put","HomePage","setTodoList","showModal","setShowModel","setTargetID","a","TodoServices","res","console","error","message","handleDelete","anID","newList","handleChange","changedItem","list","items","getAllTodos","Container","TodoListContainer","map","index","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0e6dd72c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  h1 {\r\n    font-size: 3rem;\r\n    margin: 80px 0px 60px 0px;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.ol`\r\n  padding: 30px;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.li`\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.2);\r\n  display: flex;\r\n  width: 400px;\r\n  margin: 20px 0;\r\n\r\n  p {\r\n    font-size: 1.4rem;\r\n    margin-right: 10px;\r\n    flex: 1;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  padding: 7px 10px;\r\n  margin: 5px;\r\n  color: #fff;\r\n  background-color: ${(props) => props.colour || \"inherit\"};\r\n`;\r\n","import React from \"react\";\r\n\r\n//styled component\r\nimport TodoItemContainer from \"./styledComponent/TodoItemContainer\";\r\nimport Button from \"./styledComponent/Button\";\r\n\r\nfunction TodoItem({ number, id, description, deleteHandler, changeHandler }) {\r\n  function deleteItem(anID) {\r\n    deleteHandler(anID);\r\n  }\r\n\r\n  function changeItem(anID) {\r\n    changeHandler(anID);\r\n  }\r\n\r\n  return (\r\n    <TodoItemContainer>\r\n      <p>\r\n        {number}. {description}\r\n      </p>\r\n      <Button colour=\"green\" onClick={() => changeItem(id)}>\r\n        Update\r\n      </Button>\r\n      <Button colour=\"red\" onClick={() => deleteItem(id)}>\r\n        Delete\r\n      </Button>\r\n    </TodoItemContainer>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  display: flex;\r\n  margin-bottom: 10px;\r\n\r\n  input {\r\n    width: 300px;\r\n    padding: 10px;\r\n    font-size: 1.4rem;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\n\r\n//styled components\r\nimport TodoInputContainer from \"./styledComponents/TodoInputContainer\";\r\nimport Button from \"../todoItem/styledComponent/Button\";\r\n\r\nfunction TodoInput({ inputHandler }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    inputHandler(value);\r\n    e.target.reset();\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setValue(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <TodoInputContainer>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"What needs doing?\"\r\n          onChange={handleChange}\r\n        ></input>\r\n        <Button type=\"submit\" colour=\"#6495ED\">\r\n          New Todo\r\n        </Button>\r\n      </form>\r\n    </TodoInputContainer>\r\n  );\r\n}\r\n\r\nexport default TodoInput;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  border: 3px solid red;\r\n  width: 60vh;\r\n  height: 60vh;\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 4000;\r\n  background-color: #fff;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  input {\r\n    font-size: 1.2rem;\r\n    padding: 8px;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n// styled componeneta\r\nimport ModelContainer from \"./styledComponents/ModalContainer\";\r\nimport Button from \"../todoItem/styledComponent/Button\";\r\n\r\nfunction Model({ targetID, todoList, hideModalHandler, submitHandler }) {\r\n  const [textValue, setTextValue] = useState(\"\");\r\n  const [placeholder, setPlaceholder] = useState(\"\");\r\n\r\n  function hideModal() {\r\n    hideModalHandler();\r\n  }\r\n\r\n  function findTargetText() {\r\n    let description = todoList.filter((item) => {\r\n      return item.todo_id === targetID;\r\n    })[0].description;\r\n    setPlaceholder(description);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    submitHandler(targetID, textValue);\r\n    hideModalHandler();\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setTextValue(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    findTargetText();\r\n  }, []);\r\n\r\n  return (\r\n    <ModelContainer>\r\n      <form onSubmit={handleSubmit}>\r\n        <input placeholder={placeholder} onChange={handleChange} type=\"text\" />\r\n        <Button colour=\"lightgreen\">Change</Button>\r\n      </form>\r\n      <Button colour=\"orange\" onClick={hideModal}>\r\n        Cancel\r\n      </Button>\r\n    </ModelContainer>\r\n  );\r\n}\r\n\r\nexport default Model;\r\n","export default {\r\n  baseURL: process.env.baseURL || \"http://localhost:5000/\",\r\n};\r\n","// axois Api here\r\nimport axois from \"axios\";\r\nimport config from \"../config/config\";\r\n\r\nexport default () => {\r\n  return axois.create({\r\n    baseURL: config.baseURL,\r\n  });\r\n};\r\n","import Api from \"./Api\";\r\n\r\nexport default {\r\n  getAllTodos() {\r\n    return Api().get(\"todos\");\r\n  },\r\n  deleteTodoItem(id) {\r\n    return Api().delete(`todo/${id}`);\r\n  },\r\n  addTodoItem(aDescription) {\r\n    const data = {\r\n      description: aDescription,\r\n    };\r\n    return Api().post(\"create-todo\", data);\r\n  },\r\n  updateTodoItem(id, newData) {\r\n    const data = {\r\n      todo_id: id,\r\n      description: newData,\r\n    };\r\n    return Api().put(`todo/${id}`, data);\r\n  },\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n// styled components\r\nimport Container from \"./styledComponents/Container\";\r\nimport TodoListContainer from \"./styledComponents/TodoListContainer\";\r\n\r\n// components\r\nimport TodoItem from \"../../components/todoItem/TodoItem\";\r\nimport TodoInput from \"../../components/todoInput/TodoInput\";\r\nimport Modal from \"../../components/modal/Model\";\r\n\r\n// api services\r\nimport TodoServices from \"../../services/TodoServices\";\r\n\r\nfunction HomePage() {\r\n  // STATES\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [showModal, setShowModel] = useState(false);\r\n  const [targetID, setTargetID] = useState(0);\r\n\r\n  // GET ALL TODOs\r\n  async function getAllTodos() {\r\n    try {\r\n      const res = await TodoServices.getAllTodos();\r\n      setTodoList(res.data);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n\r\n  // DELETE TODO ITEM\r\n  async function handleDelete(anID) {\r\n    try {\r\n      await TodoServices.deleteTodoItem(anID);\r\n      const newList = todoList.filter((item) => {\r\n        return item.todo_id !== anID;\r\n      });\r\n      setTodoList(newList);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n\r\n  // CREATE NEW TODO ITEM\r\n  async function handleInput(data) {\r\n    try {\r\n      const res = await TodoServices.addTodoItem(data);\r\n      setTodoList([...todoList, res.data]);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n\r\n  function handleChange(anID) {\r\n    setShowModel(true);\r\n    setTargetID(anID);\r\n  }\r\n\r\n  function handleHideModal() {\r\n    setShowModel(false);\r\n  }\r\n\r\n  // CHANGE TODO ITEM OF TARGETID\r\n  async function handleChangeSubmit(targetID, newData) {\r\n    try {\r\n      const changedItem = await TodoServices.updateTodoItem(targetID, newData);\r\n      // filter through todoList and find the changed item, update it\r\n      let list = todoList.filter((items) => {\r\n        return items.todo_id !== changedItem.data.todo_id;\r\n      });\r\n      setTodoList([...list, changedItem.data]);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllTodos();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <h1>PERN todo App</h1>\r\n      {showModal ? (\r\n        <Modal\r\n          targetID={targetID}\r\n          todoList={todoList}\r\n          hideModalHandler={handleHideModal}\r\n          submitHandler={handleChangeSubmit}\r\n        />\r\n      ) : null}\r\n      <TodoInput inputHandler={handleInput} />\r\n      <TodoListContainer>\r\n        {todoList.map((item, index) => {\r\n          return (\r\n            <TodoItem\r\n              key={index}\r\n              number={index + 1}\r\n              id={item.todo_id}\r\n              description={item.description}\r\n              deleteHandler={handleDelete}\r\n              changeHandler={handleChange}\r\n            />\r\n          );\r\n        })}\r\n      </TodoListContainer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\n\nimport HomePage from \"./views/Homepage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}